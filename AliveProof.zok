import "hashes/sha256/sha256Padded";
from "EMBED" import u32_to_bits;
from "EMBED" import u8_from_bits;

//Converts u32 integer to u8[4] char array
def u32_to_4u8(u32 num) -> u8[4] {
    bool[32] mut numB = u32_to_bits(num);
    u8[4] mut num8 = [0;4];
    for u32 i in 0..4 {
        num8[i] = u8_from_bits(numB[i*8..(i+1)*8]);
    }
    return num8;
}


def main(private u8[100] map, private u32 nonce, u32[8] expected_hash) {
    u8 mut res = 0;
    u8[4] mut nonce8 = u32_to_4u8(nonce);
    
    for u32 i in 0..100 {
        res = res + map[i];
    }
    assert(res != 0);
    
    //concatenate nonce and map
    u8[104] msg = [...map,...nonce8];

    //hash the map and nonce
    u32[8] hash = sha256Padded(msg);
    assert(hash == expected_hash);
    return;
}
