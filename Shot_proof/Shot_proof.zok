import "hashes/sha256/sha256Padded";
import "utils/casts/u8_from_bits";
import "utils/casts/u32_to_bits";


def main( private u32[8] field_hash, public u32[2] guess, private u32 nonce, private u8[100] board) -> u32[8]
{
    // Pre hash stack
    u8[100] mut pre_hash = [0;100];

    u32 boardSize = 10;

    // 1. Validate the guess is actually valid
    assert(guess[0] >= 0 && guess[0] < boardSize);
    assert(guess[1] >= 0 && guess[1] < boardSize);


    // Reduce the nonce to 4 bytes
    bool[32] mut bits_nonce = u32_to_bits(nonce);
    u8[4] mut nonce8 = [0;4];
    for u32 i in 0..4{
        nonce8[i] = u8_from_bits(bits_nonce[(i*8)..(i*8 + 8)]);
    }

    pre_hash = board;

    u8[104] msg = [...pre_hash,...nonce8];
    u32[8] hash = sha256Padded(msg);
    
    assert(field_hash == hash);

    u8[100] mut board_temp = board;
    
    // 3. Check if the guess is a hit or a miss

    bool y = if board_temp[guess[0]*10 + guess[1]] == 1 { true } else { false };

    // 4. Update the board
    board_temp[guess[0]*10 + guess[1]] = if y {1} else {0};

    u8[104] msg_2 = [...board_temp,...nonce8];

    u32[8] hash_2 = sha256Padded(msg_2);

    return hash_2;
}


