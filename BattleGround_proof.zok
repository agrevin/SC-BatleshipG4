import "hashes/sha256/sha256Padded";
import "utils/casts/u8_from_bits";
import "utils/casts/u32_to_bits";

// Define the main function for the circuit
def main(private u32 nonce, private u8[7][3] ships,) -> (u32[8],u8[100]){

    // Pre hash stack
    u8[100] mut pre_hash = [0;100];

    // Define the directions
    u32[4][2] mut directions = [[0, -1], [1, 0], [0, 1], [-1, 0]];

    // Define the board size and the ship lengths
    u32 boardSize = 10;
    u32[7] mut shipLengths = [5, 4, 3, 2, 2, 1, 1];

    // Reduce the nonce to 4 bytes
    bool[32] mut bits_nonce = u32_to_bits(nonce);
    u8[4] mut nonce8 = [0;4];
    for u32 i in 0..4{
        nonce8[i] = u8_from_bits(bits_nonce[(i*8)..(i*8 + 8)]);
    }
    
    for u32 i in 0..7{
        
        u32 shipX = ships[i][0];
        u32 shipY = ships[i][1];
        u32 shipDir = ships[i][2];

        // Check if the ship is within the board
        assert (shipX < boardSize && shipY < boardSize && shipX >=  0 && shipY >= 0);
        assert (shipX + shipLengths[i] * directions[shipDir][0] <= boardSize && shipX + shipLengths[i] * directions[shipDir][0] >= 0);
        assert (shipY + shipLengths[i] * directions[shipDir][1] <= boardSize && shipY + shipLengths[i] * directions[shipDir][1] >= 0);
    }

    u8[100] mut board = [0;100];
    for u32 i in 0..7{
        u32 shipX = ships[i][0];
        u32 shipY = ships[i][1];
        u32 shipDir = ships[i][2];
        for u32 j in 0..shipLengths[i]{
            board[shipX *10 + j * directions[shipDir][0] + shipY + j * directions[shipDir][1]] = board[shipX *10 + j * directions[shipDir][0] + shipY + j * directions[shipDir][1]] + 1;
        }
    }

    for u32 i in 0..100{
            assert (board[i] <= 1);
    }

    pre_hash = board;

    u8[88] msg = [...pre_hash,...nonce8];
    u32[8] hash = sha256Padded(msg);
    return (hash,board);
}